---
title: "Data generation"
subtitle: "Simulated dataset for package demonstration"
author: "Janick Weberpals"
date: "`r Sys.Date()`"
format: html
editor: visual
---

```{r}
#| label: setup
#| include: false
suppressPackageStartupMessages(library(tidyverse))
seed_value <- 42
```

# Create simulated dataset elements

## Simulate covariates/confounders

```{r}
#| label: simulate covariates
#| tbl-cap: Covariates summary.
n <- 10000
set.seed(seed_value)

# start with basic dataframe, covariates and their association with exposure
sim_covar <- tibble::tibble(
  age_num = rnorm(n, mean = 64, sd = 13.7),
  female_cat = rbinom(n, size = 1, prob = 0.39),
  ecog_cat = rbinom(n, size = 1, prob = 0.63),
  smoking_cat = rbinom(n, size = 1, prob = 0.15), 
  egfr_cat = rbinom(n, size = 1, prob = 0.10), 
  kras_cat = rbinom(n, size = 1, prob = 0.07),
  histology_is_squamous_cat = rbinom(n, size = 1, prob = 0.26),
  bmi_num = rnorm(n, mean = 28.9, sd = 7),
  ldl_num = rnorm(n, mean = 115.1, sd = 41.1), # cholesterol
  rr_num = rnorm(n, mean = 123.7, sd = 20.6), # systolic blood pressure
  bpm_num = rnorm(n, mean = 74.2, sd = 11.7) # heart rate
  ) %>%  
  # bring data in right format
  dplyr::mutate(across(ends_with("num"), as.numeric)) %>% 
  dplyr::mutate(across(ends_with("num"), function(x) round(x, digits = 2)))

sim_covar %>% 
  gtsummary::tbl_summary()
```


## Simulate exposure

First, we assign coefficients for a binary treatment with the following odds for being assigned to the exposure:

```{r}
#| label: simulate exposure
#| tbl-cap: Exposure and outcome log coefficients.

# Model parameters for binary treatment assignment and outcome model
betas <- tibble::tibble(
  covariate = colnames(sim_covar),
  log_or_exposure = log(c(1.02, 0.9, 0.85, 1.1, 1.15, 1.0, 1.1, 0.85, 1.0, 1.0, 1.0)),
  log_hr_outcome = log(c(1.1, 0.8, 0.7, 1.3, 0.5, 1.5, 1.2, 0.85, 1.05, 1.05, 1.0))
  ) %>% 
  tibble::add_row(
    covariate = "exposure", 
    log_hr_outcome = log(0.7)
    )

betas %>% 
  dplyr::mutate(across(where(is.numeric), function(x) round(x, 3))) %>% 
  gt::gt()
```

Plot of simulated treatment probabilities:

```{r}
#| label: Pr(treatment assignment)
#| fig-cap: Treatment assignment probabilities.

# Feature matrix for treatment assignment
trt_matrix <- sim_covar %>%
  as.matrix

# Beta vector for treatment assignment
beta_exposure <- betas %>%
  dplyr::slice(match(covariate, colnames(trt_matrix))) %>%
  dplyr::pull(log_or_exposure)

# Linear predictor
logit_p_exposure <- as.numeric(trt_matrix %*% beta_exposure)

# Simulate treatment assignment
set.seed(42)
sim_df <- sim_covar %>%
  dplyr::mutate(
    p_exposure = plogis(2.5 + logit_p_exposure),
    exposure = rbinom(n(), 1, p_exposure)
    )

sim_df %>% 
  ggplot2::ggplot(ggplot2::aes(x = p_exposure, fill = factor(exposure))) +
  ggplot2::geom_density(alpha = .5) +
  ggplot2::theme_bw() +
  ggplot2::labs(
    x = "Pr(exposure)",
    y = "Density",
    fill = "Exposed"
  )

sim_df <- sim_df %>% 
 dplyr::select(-p_exposure)  
```

Table, displaying odds of exposure assignment:

```{r}
#| label: OR for Pr(treatment assignment) table
#| tbl-cap: Treatment assignment probabilities.
exposure_form <- as.formula(paste("exposure ~ ", paste(colnames(sim_covar), collapse = " + ")))

stats::glm(
  exposure_form,
  data = sim_df,
  family = "binomial"
  ) %>% 
  gtsummary::tbl_regression(exponentiate = T)
```

## Simulate time-to-event

Finally, we simulate a time-to-event outcome for overall survival:

```{r}
#| label: Simulate outcome
#| tbl-cap: HRs for overall survival
suppressPackageStartupMessages(library(survival))

# Feature matrix for OS
os_matrix <- sim_df %>%
  as.matrix

# Beta vector for OS
beta_os <- betas %>%
  dplyr::slice(match(covariate, colnames(os_matrix))) %>%
  dplyr::pull(log_hr_outcome)

# Linear predictor
log_hazard <- as.numeric(os_matrix %*% beta_os)

# Simulate OS and censoring
set.seed(42)
sim_df2 <- sim_df %>%
  dplyr::mutate(
    lambda = exp(log_hazard),
    survival_time = rexp(n(), lambda),
    censoring_time = rexp(n(), lambda),
    time = pmin(survival_time, censoring_time),
    status = as.numeric(censoring_time > survival_time)
    ) %>% 
  dplyr::select(-c(lambda, survival_time, censoring_time))

cox_lhs <- "Surv(time, status)"
cox_rhs <- paste(colnames(sim_covar), collapse = " + ")
cox_form = as.formula(paste(cox_lhs, "~ exposure +", cox_rhs))
  
cox_fit <- survival::coxph(cox_form, data = sim_df2)

cox_fit %>% 
  gtsummary::tbl_regression(exponentiate = T)
```

```{r}
#| label: kaplan meier
#| tbl-cap: Crude Kaplan-Meier by exposure and EGFR biomarker for overall survival.

km_exposure <- survfit(Surv(time, status) ~ exposure, data = sim_df2)
survminer::ggadjustedcurves(cox_fit, data = sim_df2)
```


# Overview final simulated dataset

## Table 1

Overview on generated data by exposure assignment

```{r}
tbl1 <- tableone::CreateTableOne(
  data = sim_df,
  vars = names(sim_df %>% dplyr::select(-exposure)),
  strata = "exposure",
  includeNA = TRUE,
  test = TRUE
  )

tbl1 %>% 
  print(smd = TRUE)
```
